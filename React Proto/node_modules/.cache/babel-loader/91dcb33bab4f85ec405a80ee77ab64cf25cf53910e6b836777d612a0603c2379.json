{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jackg\\\\Documents\\\\GitHub\\\\Capstone\\\\React Proto\\\\src\\\\index.js\";\n// let controllerIndex = null;\n// let arcadeorxbox = true;\n// const dpad = ['arcade-12', 'arcade-13', 'arcade-14', 'arcade-15'];\n\n// window.addEventListener('gamepadconnected',(event)=>{\n//     const gamepad = event.gamepad;\n//     controllerIndex = gamepad.index;\n//     handleConnectDisconnect(event ,true);\n//     //TODO ADD PLAYER CONTROLLER MAPPING\n//     console.log(\"connected!\");\n// });\n// window.addEventListener('gamepaddisconnected',(event)=>{\n//     const gamepad = event.gamepad;\n//     handleConnectDisconnect(event ,false);\n//     //TODO make alt case use keyboard input\n//     controllerIndex = gamepad.index;\n//     console.log(\"disconnected\");\n// });\n// // setting up the xbox controller being hidden from the get go\n// document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\n// const button = document.querySelector(\"button\");\n// button.addEventListener(\"click\", (evt) => {\n//     arcadeorxbox = !arcadeorxbox;\n//     document.getElementById(\"arcadestick\").classList.toggle(\"invisible\");\n//     document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\n// });\n\n// function handleConnectDisconnect(event, connected){\n//     const controllerAreaNotConnected = document.getElementById(\n//         \"controller-not-connected-area\"\n//         );\n//     const controllerAreaConnected = document.getElementById(\n//         \"controller-connected-area\"\n//         );\n//     const gamepad = event.gamepad;\n//     console.log(gamepad);\n//     if(connected){\n//         // controllerAreaNotConnected.sytle.display = \"none\";\n//         // controllerAreaConnected.sytle.display = \"block\";\n//     }\n//     else{\n//         // controllerAreaNotConnected.sytle.display = \"block\";\n//         // controllerAreaConnected.sytle.display = \"none\";\n//     }\n\n// }\n// //array holding current buttons pressed on given frame\n// // const buttonspressed = [];\n\n// function handleButtons(buttons) {\n//     for (let i = 0; i < buttons.length; i++){\n//         const button = buttons[i];\n//         let buttonElement = 0;\n// //Structure for switching between arcade and xbox\n//         if(arcadeorxbox === true)\n//         {\n//             buttonElement = document.getElementById(`arcade-${i}`);\n//         }\n//         else\n//         {\n//             buttonElement = document.getElementById(`controller-${i}`);\n//         }\n\n//         // const buttonElement = document.getElementById(`arcade-${i}`);\n//         // const buttonElement = document.getElementById(`controller-${i}`);\n\n//         const selectedButtonClass = 'selected-button';\n//         if(buttonElement){\n//             if(button.value > 0)\n//             {\n//                 buttonElement.classList.add(selectedButtonClass);\n//                 console.log(buttonElement.id);\n//                 //For handling corners on arcadestick\n//                     //might just abandon\n//                 // buttonspressed.push(buttonElement.id);\n//                 // if(buttonspressed.includes());\n//             }\n//             else\n//             {\n//                 buttonElement.classList.remove(selectedButtonClass);\n//                 // const idx = buttonspressed.indexof(buttonElement.id);\n//                 // buttonspressed.splice(idx,1)\n\n//             }\n//         }\n\n//     }\n// }\n// function updateStick(elementId, leftRightAxis, upDownAxis) {\n//     const multiplier = 25;\n//     const stickLeftRight = leftRightAxis * multiplier;\n//     const stickUpDown = upDownAxis * multiplier;\n//     const stick = document.getElementById(elementId);\n//     const x = Number(stick.getAttribute(\"data-og_x\"));\n//     const y = Number(stick.getAttribute(\"data-og_y\"));\n//     stick.setAttribute(\"cx\", x + stickLeftRight);\n//     stick.setAttribute(\"cy\", y + stickUpDown);\n\n// }\n// function handleSticks(axes, arcade){\n//     if (arcade === false)\n//     {\n//         updateStick('stick1',axes[2],axes[3]);\n//         updateStick('stick2',axes[0],axes[1]);\n//     }\n\n// }\n// function gameLoop(arcade) {\n//     if (controllerIndex !== null){\n//         const gamepad = navigator.getGamepads()[controllerIndex];\n//         console.log(arcadeorxbox);\n//         handleButtons(gamepad.buttons, arcadeorxbox);\n//         handleSticks(gamepad.axes, arcadeorxbox);\n//     }\n\n//     requestAnimationFrame(gameLoop);\n// }\n\n// // let arcade = true;\n// gameLoop();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport 'style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.createRoot(document.getElementById(\"root\")).render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 136,\n  columnNumber: 9\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","createRoot","document","getElementById","render","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/jackg/Documents/GitHub/Capstone/React Proto/src/index.js"],"sourcesContent":["// let controllerIndex = null;\r\n// let arcadeorxbox = true;\r\n// const dpad = ['arcade-12', 'arcade-13', 'arcade-14', 'arcade-15'];\r\n\r\n\r\n// window.addEventListener('gamepadconnected',(event)=>{\r\n//     const gamepad = event.gamepad;\r\n//     controllerIndex = gamepad.index;\r\n//     handleConnectDisconnect(event ,true);\r\n//     //TODO ADD PLAYER CONTROLLER MAPPING\r\n//     console.log(\"connected!\");\r\n// });\r\n// window.addEventListener('gamepaddisconnected',(event)=>{\r\n//     const gamepad = event.gamepad;\r\n//     handleConnectDisconnect(event ,false);\r\n//     //TODO make alt case use keyboard input\r\n//     controllerIndex = gamepad.index;\r\n//     console.log(\"disconnected\");\r\n// });\r\n// // setting up the xbox controller being hidden from the get go\r\n// document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\r\n// const button = document.querySelector(\"button\");\r\n// button.addEventListener(\"click\", (evt) => {\r\n//     arcadeorxbox = !arcadeorxbox;\r\n//     document.getElementById(\"arcadestick\").classList.toggle(\"invisible\");\r\n//     document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\r\n// });\r\n\r\n// function handleConnectDisconnect(event, connected){\r\n//     const controllerAreaNotConnected = document.getElementById(\r\n//         \"controller-not-connected-area\"\r\n//         );\r\n//     const controllerAreaConnected = document.getElementById(\r\n//         \"controller-connected-area\"\r\n//         );\r\n//     const gamepad = event.gamepad;\r\n//     console.log(gamepad);\r\n//     if(connected){\r\n//         // controllerAreaNotConnected.sytle.display = \"none\";\r\n//         // controllerAreaConnected.sytle.display = \"block\";\r\n//     }\r\n//     else{\r\n//         // controllerAreaNotConnected.sytle.display = \"block\";\r\n//         // controllerAreaConnected.sytle.display = \"none\";\r\n//     }\r\n\r\n// }\r\n// //array holding current buttons pressed on given frame\r\n// // const buttonspressed = [];\r\n\r\n\r\n// function handleButtons(buttons) {\r\n//     for (let i = 0; i < buttons.length; i++){\r\n//         const button = buttons[i];\r\n//         let buttonElement = 0;\r\n// //Structure for switching between arcade and xbox\r\n//         if(arcadeorxbox === true)\r\n//         {\r\n//             buttonElement = document.getElementById(`arcade-${i}`);\r\n//         }\r\n//         else\r\n//         {\r\n//             buttonElement = document.getElementById(`controller-${i}`);\r\n//         }\r\n        \r\n//         // const buttonElement = document.getElementById(`arcade-${i}`);\r\n//         // const buttonElement = document.getElementById(`controller-${i}`);\r\n\r\n//         const selectedButtonClass = 'selected-button';\r\n//         if(buttonElement){\r\n//             if(button.value > 0)\r\n//             {\r\n//                 buttonElement.classList.add(selectedButtonClass);\r\n//                 console.log(buttonElement.id);\r\n//                 //For handling corners on arcadestick\r\n//                     //might just abandon\r\n//                 // buttonspressed.push(buttonElement.id);\r\n//                 // if(buttonspressed.includes());\r\n//             }\r\n//             else\r\n//             {\r\n//                 buttonElement.classList.remove(selectedButtonClass);\r\n//                 // const idx = buttonspressed.indexof(buttonElement.id);\r\n//                 // buttonspressed.splice(idx,1)\r\n\r\n//             }\r\n//         }\r\n        \r\n//     }\r\n// }\r\n// function updateStick(elementId, leftRightAxis, upDownAxis) {\r\n//     const multiplier = 25;\r\n//     const stickLeftRight = leftRightAxis * multiplier;\r\n//     const stickUpDown = upDownAxis * multiplier;\r\n//     const stick = document.getElementById(elementId);\r\n//     const x = Number(stick.getAttribute(\"data-og_x\"));\r\n//     const y = Number(stick.getAttribute(\"data-og_y\"));\r\n//     stick.setAttribute(\"cx\", x + stickLeftRight);\r\n//     stick.setAttribute(\"cy\", y + stickUpDown);\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n// }\r\n// function handleSticks(axes, arcade){\r\n//     if (arcade === false)\r\n//     {\r\n//         updateStick('stick1',axes[2],axes[3]);\r\n//         updateStick('stick2',axes[0],axes[1]);\r\n//     }\r\n    \r\n// }\r\n// function gameLoop(arcade) {\r\n//     if (controllerIndex !== null){\r\n//         const gamepad = navigator.getGamepads()[controllerIndex];\r\n//         console.log(arcadeorxbox);\r\n//         handleButtons(gamepad.buttons, arcadeorxbox);\r\n//         handleSticks(gamepad.axes, arcadeorxbox);\r\n//     }\r\n\r\n//     requestAnimationFrame(gameLoop);\r\n// }\r\n\r\n// // let arcade = true;\r\n// gameLoop();\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.js';\r\nimport 'style.css'\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")).render(\r\n        <App />\r\n)"],"mappings":";AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,GAAG,MAAM,UAAU;AAC1B,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElBH,QAAQ,CAACI,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CAACC,MAAM,eACnDJ,OAAA,CAACF,GAAG;EAAAO,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,QAAG,CACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}