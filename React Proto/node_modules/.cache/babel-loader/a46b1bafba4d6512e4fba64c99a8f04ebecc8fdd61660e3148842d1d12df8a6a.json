{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jackg\\\\Documents\\\\GitHub\\\\Capstone\\\\React Proto\\\\src\\\\gamepad.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gamepad = () => {\n  _s();\n  const [controllerIndex, setControllerIndex] = useState(null);\n  const [arcadeorxbox, setArcadeorxbox] = useState(true);\n  const dpad = ['arcade-12', 'arcade-13', 'arcade-14', 'arcade-15'];\n\n  // let controllerIndex = null;\n  // let arcadeorxbox = true;\n\n  useEffect(() => {\n    const connected = event => {\n      const gamepad = event.gamepad;\n      controllerIndex = gamepad.index;\n      handleConnectDisconnect(event, true);\n      //TODO ADD PLAYER CONTROLLER MAPPING\n      console.log(\"connected!\");\n    };\n    const disconnected = event => {\n      const gamepad = event.gamepad;\n      handleConnectDisconnect(event, false);\n      //TODO make alt case use keyboard input\n      controllerIndex = gamepad.index;\n      console.log(\"disconnected\");\n    };\n    window.addEventListener('gamepadconnected', connected);\n    window.addEventListener('gamepaddisconnected', disconnected);\n    return () => {\n      window.removeEventListener('gamepadconnected', connected);\n      window.removeEventListener('gamepaddisconnected', disconnected);\n    };\n  }, []);\n\n  // window.addEventListener('gamepadconnected',(event)=>{\n  //     const gamepad = event.gamepad;\n  //     controllerIndex = gamepad.index;\n  //     handleConnectDisconnect(event ,true);\n  //     //TODO ADD PLAYER CONTROLLER MAPPING\n  //     console.log(\"connected!\");\n  // });\n  // window.addEventListener('gamepaddisconnected',(event)=>{\n  //     const gamepad = event.gamepad;\n  //     handleConnectDisconnect(event ,false);\n  //     //TODO make alt case use keyboard input\n  //     controllerIndex = gamepad.index;\n  //     console.log(\"disconnected\");\n  // });\n  // setting up the xbox controller being hidden from the get go\n  document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\n  const button = document.querySelector(\"button\");\n  button.addEventListener(\"click\", evt => {\n    arcadeorxbox = !arcadeorxbox;\n    document.getElementById(\"arcadestick\").classList.toggle(\"invisible\");\n    document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\n  });\n  function handleConnectDisconnect(event, connected) {\n    const controllerAreaNotConnected = document.getElementById(\"controller-not-connected-area\");\n    const controllerAreaConnected = document.getElementById(\"controller-connected-area\");\n    const gamepad = event.gamepad;\n    console.log(gamepad);\n    if (connected) {\n      // controllerAreaNotConnected.sytle.display = \"none\";\n      // controllerAreaConnected.sytle.display = \"block\";\n    } else {\n      // controllerAreaNotConnected.sytle.display = \"block\";\n      // controllerAreaConnected.sytle.display = \"none\";\n    }\n  }\n  //array holding current buttons pressed on given frame\n  // const buttonspressed = [];\n\n  function handleButtons(buttons) {\n    for (let i = 0; i < buttons.length; i++) {\n      const button = buttons[i];\n      let buttonElement = 0;\n      //Structure for switching between arcade and xbox\n      if (arcadeorxbox === true) {\n        buttonElement = document.getElementById(`arcade-${i}`);\n      } else {\n        buttonElement = document.getElementById(`controller-${i}`);\n      }\n\n      // const buttonElement = document.getElementById(`arcade-${i}`);\n      // const buttonElement = document.getElementById(`controller-${i}`);\n\n      const selectedButtonClass = 'selected-button';\n      if (buttonElement) {\n        if (button.value > 0) {\n          buttonElement.classList.add(selectedButtonClass);\n          console.log(buttonElement.id);\n          //For handling corners on arcadestick\n          //might just abandon\n          // buttonspressed.push(buttonElement.id);\n          // if(buttonspressed.includes());\n        } else {\n          buttonElement.classList.remove(selectedButtonClass);\n          // const idx = buttonspressed.indexof(buttonElement.id);\n          // buttonspressed.splice(idx,1)\n        }\n      }\n    }\n  }\n\n  function updateStick(elementId, leftRightAxis, upDownAxis) {\n    const multiplier = 25;\n    const stickLeftRight = leftRightAxis * multiplier;\n    const stickUpDown = upDownAxis * multiplier;\n    const stick = document.getElementById(elementId);\n    const x = Number(stick.getAttribute(\"data-og_x\"));\n    const y = Number(stick.getAttribute(\"data-og_y\"));\n    stick.setAttribute(\"cx\", x + stickLeftRight);\n    stick.setAttribute(\"cy\", y + stickUpDown);\n  }\n  function handleSticks(axes, arcade) {\n    if (arcade === false) {\n      updateStick('stick1', axes[2], axes[3]);\n      updateStick('stick2', axes[0], axes[1]);\n    }\n  }\n  function gameLoop(arcade) {\n    if (controllerIndex !== null) {\n      const gamepad = navigator.getGamepads()[controllerIndex];\n      console.log(arcadeorxbox);\n      handleButtons(gamepad.buttons, arcadeorxbox);\n      handleSticks(gamepad.axes, arcadeorxbox);\n    }\n    requestAnimationFrame(gameLoop);\n  }\n\n  // let arcade = true;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Bipple\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n_s(Gamepad, \"n9aqhhve3vEFbUlhnPWwXlJJ4bg=\");\n_c = Gamepad;\nexport default Gamepad;\nvar _c;\n$RefreshReg$(_c, \"Gamepad\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Gamepad","_s","controllerIndex","setControllerIndex","arcadeorxbox","setArcadeorxbox","dpad","connected","event","gamepad","index","handleConnectDisconnect","console","log","disconnected","window","addEventListener","removeEventListener","document","getElementById","classList","toggle","button","querySelector","evt","controllerAreaNotConnected","controllerAreaConnected","handleButtons","buttons","i","length","buttonElement","selectedButtonClass","value","add","id","remove","updateStick","elementId","leftRightAxis","upDownAxis","multiplier","stickLeftRight","stickUpDown","stick","x","Number","getAttribute","y","setAttribute","handleSticks","axes","arcade","gameLoop","navigator","getGamepads","requestAnimationFrame","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jackg/Documents/GitHub/Capstone/React Proto/src/gamepad.js"],"sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nconst Gamepad = () => {\r\n\r\n    const [ controllerIndex, setControllerIndex ] = useState(null);\r\n    const [ arcadeorxbox, setArcadeorxbox ] = useState(true);\r\n    const dpad = ['arcade-12', 'arcade-13', 'arcade-14', 'arcade-15'];\r\n\r\n    // let controllerIndex = null;\r\n    // let arcadeorxbox = true;\r\n    \r\n    useEffect(() => {\r\n        const connected = (event) => {\r\n            const gamepad = event.gamepad;\r\n            controllerIndex = gamepad.index;\r\n            handleConnectDisconnect(event ,true);\r\n            //TODO ADD PLAYER CONTROLLER MAPPING\r\n            console.log(\"connected!\");\r\n        }\r\n\r\n        const disconnected = (event) => {\r\n            const gamepad = event.gamepad;\r\n            handleConnectDisconnect(event ,false);\r\n            //TODO make alt case use keyboard input\r\n            controllerIndex = gamepad.index;\r\n            console.log(\"disconnected\");\r\n        }\r\n        window.addEventListener('gamepadconnected', connected);\r\n        window.addEventListener('gamepaddisconnected', disconnected);\r\n\r\n        return () => {\r\n            window.removeEventListener('gamepadconnected', connected);\r\n            window.removeEventListener('gamepaddisconnected', disconnected)\r\n        }\r\n    }, [])\r\n\r\n    // window.addEventListener('gamepadconnected',(event)=>{\r\n    //     const gamepad = event.gamepad;\r\n    //     controllerIndex = gamepad.index;\r\n    //     handleConnectDisconnect(event ,true);\r\n    //     //TODO ADD PLAYER CONTROLLER MAPPING\r\n    //     console.log(\"connected!\");\r\n    // });\r\n    // window.addEventListener('gamepaddisconnected',(event)=>{\r\n    //     const gamepad = event.gamepad;\r\n    //     handleConnectDisconnect(event ,false);\r\n    //     //TODO make alt case use keyboard input\r\n    //     controllerIndex = gamepad.index;\r\n    //     console.log(\"disconnected\");\r\n    // });\r\n    // setting up the xbox controller being hidden from the get go\r\n    document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\r\n    const button = document.querySelector(\"button\");\r\n    button.addEventListener(\"click\", (evt) => {\r\n        arcadeorxbox = !arcadeorxbox;\r\n        document.getElementById(\"arcadestick\").classList.toggle(\"invisible\");\r\n        document.getElementById(\"xbox_div\").classList.toggle(\"invisible\");\r\n    });\r\n\r\n    function handleConnectDisconnect(event, connected){\r\n        const controllerAreaNotConnected = document.getElementById(\r\n            \"controller-not-connected-area\"\r\n            );\r\n        const controllerAreaConnected = document.getElementById(\r\n            \"controller-connected-area\"\r\n            );\r\n        const gamepad = event.gamepad;\r\n        console.log(gamepad);\r\n        if(connected){\r\n            // controllerAreaNotConnected.sytle.display = \"none\";\r\n            // controllerAreaConnected.sytle.display = \"block\";\r\n        }\r\n        else{\r\n            // controllerAreaNotConnected.sytle.display = \"block\";\r\n            // controllerAreaConnected.sytle.display = \"none\";\r\n        }\r\n\r\n    }\r\n    //array holding current buttons pressed on given frame\r\n    // const buttonspressed = [];\r\n\r\n\r\n    function handleButtons(buttons) {\r\n        for (let i = 0; i < buttons.length; i++){\r\n            const button = buttons[i];\r\n            let buttonElement = 0;\r\n    //Structure for switching between arcade and xbox\r\n            if(arcadeorxbox === true)\r\n            {\r\n                buttonElement = document.getElementById(`arcade-${i}`);\r\n            }\r\n            else\r\n            {\r\n                buttonElement = document.getElementById(`controller-${i}`);\r\n            }\r\n            \r\n            // const buttonElement = document.getElementById(`arcade-${i}`);\r\n            // const buttonElement = document.getElementById(`controller-${i}`);\r\n\r\n            const selectedButtonClass = 'selected-button';\r\n            if(buttonElement){\r\n                if(button.value > 0)\r\n                {\r\n                    buttonElement.classList.add(selectedButtonClass);\r\n                    console.log(buttonElement.id);\r\n                    //For handling corners on arcadestick\r\n                        //might just abandon\r\n                    // buttonspressed.push(buttonElement.id);\r\n                    // if(buttonspressed.includes());\r\n                }\r\n                else\r\n                {\r\n                    buttonElement.classList.remove(selectedButtonClass);\r\n                    // const idx = buttonspressed.indexof(buttonElement.id);\r\n                    // buttonspressed.splice(idx,1)\r\n\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n    function updateStick(elementId, leftRightAxis, upDownAxis) {\r\n        const multiplier = 25;\r\n        const stickLeftRight = leftRightAxis * multiplier;\r\n        const stickUpDown = upDownAxis * multiplier;\r\n        const stick = document.getElementById(elementId);\r\n        const x = Number(stick.getAttribute(\"data-og_x\"));\r\n        const y = Number(stick.getAttribute(\"data-og_y\"));\r\n        stick.setAttribute(\"cx\", x + stickLeftRight);\r\n        stick.setAttribute(\"cy\", y + stickUpDown);\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n    }\r\n    function handleSticks(axes, arcade){\r\n        if (arcade === false)\r\n        {\r\n            updateStick('stick1',axes[2],axes[3]);\r\n            updateStick('stick2',axes[0],axes[1]);\r\n        }\r\n        \r\n    }\r\n    function gameLoop(arcade) {\r\n        if (controllerIndex !== null){\r\n            const gamepad = navigator.getGamepads()[controllerIndex];\r\n            console.log(arcadeorxbox);\r\n            handleButtons(gamepad.buttons, arcadeorxbox);\r\n            handleSticks(gamepad.axes, arcadeorxbox);\r\n        }\r\n\r\n        requestAnimationFrame(gameLoop);\r\n    }\r\n    \r\n    // let arcade = true;\r\n    return(\r\n        <div>Bipple</div>\r\n    )\r\n}\r\n\r\nexport default Gamepad;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}